# sudo: false --> run dist image in docker container on shared host for faster startup (runs slower)
# sudo: required --> run dist image in VM on Google Compute Engine for slower startup (runs faster)
sudo: required

language: android
jdk: oraclejdk8
dist: precise

#branches:
#  only:
#    - master

env:
  global:
    - ADB_INSTALL_TIMEOUT=20 # default is 2 minutes and sometimes is not enough
    - BUILD_TOOLS="28.0.3"
    - EMULATOR_API=24
  matrix:
    - API_LEVEL=25 ABI="arm64-v8a"
    - API_LEVEL=24 ABI="arm64-v8a"
    - API_LEVEL=23 ABI="armeabi-v7a"
    - API_LEVEL=22 ABI="armeabi-v7a"
    - API_LEVEL=21 ABI="armeabi-v7a"

android:
  components:
    - tools
    - platform-tools
    - tools
    - build-tools-$BUILD_TOOLS
    - android-$API
    - android-$EMULATOR_API
    - extra-android-m2repository
    - sys-img-$ABI-android-$API
    - sys-img-armeabi-v7a-android-$EMULATOR_API_LEVEL

before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.android/build-cache

before_install:
  - touch /home/travis/.android/repositories.cfg
  # Avoid useless reupload of cache after every build, see https://docs.travis-ci.com/user/languages/android
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
  - yes | sdkmanager --update
  - yes | sdkmanager "system-images;android-$API_LEVEL;google_apis;$ABI"
  #- yes | sdkmanager "build-tools;"$BUILD_TOOLS
  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses
  - sdkmanager --list
  - chmod +x gradlew

before_script:
  # Create and start emulator
  - echo no | avdmanager create avd -n testAVD -k "system-images;android-$API_LEVEL;google_apis;$ABI"
  - $ANDROID_HOME/emulator/emulator -avd testAVD -no-skin -no-window &
  - android-wait-for-emulator
  - adb devices
  - adb shell input keyevent 82 &

script:
  # run tests  against the emulator
  - "./gradlew clean connectedAndroidTest"
  # run tests  against the JVM
  - "./gradlew clean test"